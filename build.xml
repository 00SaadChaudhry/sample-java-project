<?xml version="1.0"?>
<project name="SampleJavaProject" default="jar"
	 xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- Project-specific configuration -->
  <loadproperties srcfile="project.properties" />
  <property name="main.class" value="${package.main}.${ant.project.name}"/>
  <property name="base.name" value="${artifactId}-${version}"/>

  <!-- Standard Directory Layout -->
  <property name="src.dir" value="src"/>
  <property name="test.dir" value="test"/>
  <property name="build.dir" value="build"/>
  <property name="build.classes.dir" value="${build.dir}/classes"/>
  <property name="test.classes.dir" value="${build.dir}/test"/>
  <property name="dist.dir" value="dist"/>
  <property name="lib.dir" value="lib"/>

  <!-- Project classpath -->
  <path id="build.classpath">
    <fileset dir="${lib.dir}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <!-- Targets -->

  <target name="init">
    <available file="${lib.dir}" property="lib.present"/>
    <mkdir dir="${build.classes.dir}"/>
    <mkdir dir="${dist.dir}"/>
  </target>

  <target name="resolve" unless="lib.present"
	  description="Retrieve dependencies with ivy.">
    <ivy:retrieve type="jar,bundle"/>
  </target>

  <target name="compile" depends="init,resolve"
	  description="Compile all source files.">
    <javac srcdir="${src.dir}" destdir="${build.classes.dir}"
	   optimize="on" debug="on" deprecation="on"
	   includeantruntime="false">
      <compilerarg value="-Xlint"/>
      <classpath refid="build.classpath"/>
    </javac>
    <copy todir="${build.classes.dir}">
      <fileset dir="${src.dir}" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="jar" depends="compile"
	  description="Generate the jarfile distributable.">
    <jar destfile="${dist.dir}/${base.name}.jar"
	 basedir="${build.classes.dir}">
      <manifest>
        <attribute name="Main-Class" value="${main.class}"/>
      </manifest>
    </jar>
    <jar destfile="${dist.dir}/${base.name}-all.jar"
	 basedir="${build.classes.dir}">
      <zipgroupfileset dir="${lib.dir}" includes="*.jar"/>
      <manifest>
        <attribute name="Main-Class" value="${main.class}"/>
      </manifest>
    </jar>
  </target>

  <target name="run" depends="compile" description="Run the application.">
    <java classname="${main.class}" classpath="${build.classes.dir}">
      <classpath refid="build.classpath"/>
      <arg value="--name"/>
      <arg value="Java"/>
    </java>
  </target>

  <target name="run-hotswap" depends="compile"
	  description="Run the application in hotswap mode.">
    <java classname="${main.class}" classpath="${build.classes.dir}"
	  fork="true">
      <classpath refid="build.classpath"/>
      <jvmarg line="-Xdebug -Xrunjdwp:transport=dt_socket,address=9000,server=y,suspend=n"/>
      <arg value="--loop"/>
      <arg value="--name"/>
      <arg value="Java"/>
    </java>
  </target>

  <target name="hotswap" depends="compile">
    <taskdef name="hotswap" classname="dak.ant.taskdefs.Hotswap"/>
    <hotswap verbose="true" port="9000">
      <fileset dir="${build.classes.dir}" includes="**/*.class">
	<modified/>
      </fileset>
    </hotswap>
  </target>

  <target name="clean" description="Delete all generated files.">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete dir="${lib.dir}"/>
    <delete file="cache.properties"/>
  </target>

  <target name="javadoc" description="Generate Javadoc HTML.">
    <javadoc destdir="${dist.dir}/javadoc"
	     link="http://download.oracle.com/javase/6/docs/api/"
	     sourcepath="${src.dir}"/>
  </target>

  <target name="format" description="Run the indenter on all source files.">
    <apply executable="astyle">
      <arg value="--mode=java"/>
      <arg value="--suffix=none"/>
      <fileset dir="${src.dir}" includes="**/*.java"/>
      <fileset dir="${test.dir}" includes="**/*.java"/>
    </apply>
  </target>

  <target name="check">
    <taskdef resource="checkstyletask.properties"/>
    <checkstyle config="checkstyle.xml">
      <fileset dir="src" includes="**/*.java"/>
    </checkstyle>
  </target>

  <target name="tags" description="Generate a TAGS file for your editor.">
    <delete file="TAGS"/>
    <apply executable="etags">
      <arg value="-a"/>
      <fileset dir="${src.dir}" includes="**/*.java"/>
      <fileset dir="${test.dir}" includes="**/*.java"/>
    </apply>
  </target>

  <!-- Unit testing (JUnit) -->

  <target name="test-compile" depends="compile"
	  description="Compile all of the unit tests.">
    <mkdir dir="${test.classes.dir}"/>
    <javac srcdir="${test.dir}" destdir="${test.classes.dir}"
	   optimize="on" debug="on" deprecation="on"
	   classpath="${build.classes.dir}" includeantruntime="yes">
      <compilerarg value="-Xlint"/>
      <classpath refid="build.classpath"/>
    </javac>
    <copy todir="${test.classes.dir}">
      <fileset dir="${test.dir}" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="test" depends="test-compile"
	  description="Run all of the unit tests.">
    <junit>
      <classpath>
	<pathelement path="${build.classes.dir}"/>
	<pathelement path="${test.classes.dir}"/>
	<path refid="build.classpath"/>
      </classpath>
      <batchtest>
	<formatter type="brief" usefile="false"/>
	<fileset dir="${test.classes.dir}"/>
      </batchtest>
    </junit>
  </target>

  <!-- Maven repository support -->

  <target name="bundle" depends="jar,javadoc"
	  description="Stage a Maven repository bundle.">
    <!-- Pack up the artifacts -->
    <filter filtersfile="project.properties"/>
    <filter token="ant.project.name" value="${ant.project.name}"/>
    <copy file="pom.xml" filtering="true"
	  tofile="${dist.dir}/bundle/${base.name}.pom"/>
    <copy file="${dist.dir}/${base.name}.jar" todir="${dist.dir}/bundle/"/>
    <jar jarfile="${dist.dir}/bundle/${base.name}-javadoc.jar">
      <fileset dir="${dist.dir}/javadoc"/>
    </jar>
    <jar jarfile="${dist.dir}/bundle/${base.name}-sources.jar">
      <fileset dir="${src.dir}"/>
    </jar>
    <!-- Sign all the things. You'll need gpg-agent help here. -->
    <apply executable="gpg">
      <arg value="--detach-sign"/>
      <arg value="--armor"/>
      <fileset dir="${dist.dir}/bundle"/>
    </apply>
    <!-- Pack it all up -->
    <jar destfile="${dist.dir}/bundle.jar" basedir="${dist.dir}/bundle"/>
  </target>
</project>
